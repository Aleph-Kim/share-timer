<div class="timer flex flex-col items-center justify-center">
  <h1 id="title" class="text-3xl font-bold mb-4"></h1>
  <p id="description" class="text-lg mb-6"></p>

  <div class="timer-container">
    <div class="timer-circle relative">
      <svg class="timer-svg">
        <circle cx="50%" cy="50%" r="48%" class="timer-circle-background"></circle>
        <circle cx="50%" cy="50%" r="48%" class="timer-circle-foreground"></circle>
      </svg>
      <div class="time-text absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center w-full">
        <div class="text-3xl flex justify-center items-end mb-2">
          <span class="countdown">
            <span id="timer-hour" style="--value:0;"></span>
          </span>
          <span id="timer-hour-colon">:</span>
          <span class="countdown">
            <span id="timer-minutes" style="--value:0;"></span>
          </span>
          <span id="timer-minutes-colon">:</span>
          <span class="countdown">
            <span id="timer-seconds" style="--value:0;"></span>
          </span>
        </div>
        <div>⏰ <span class="alarm-time text-warning text-xl ">00:00</span></div>
        <button id="soundOffBtn" class="btn btn-neutral mt-4 hidden" onclick="soundOff()">알람 끄기</button>
      </div>
    </div>
    <div class="progress-bar bg-neutral mt-6 rounded-lg overflow-hidden w-full h-5 relative">
      <div class="progress h-full bg-primary" style="width: 0%;"></div>
      <div class="progress-text absolute top-0 left-1/2 transform -translate-x-1/2 text-white flex h-full items-center">
        <span class="progress-per">0</span><span>%</span>
      </div>
    </div>
  </div>
</div>
<script>
  const socket = io();
  let timerInterval;

  /**
   * timerUpdated 소켓 이벤트 발생 시 타이머를 새로 시작
   */
  socket.on('timerUpdated', (data) => {
    document.getElementById('title').textContent = data.title;
    document.getElementById('description').textContent = data.description;

    // 기존 타이머 제거
    if (timerInterval) {
      clearInterval(timerInterval);
    }

    // 새로운 타이머 시작
    updateTimer(data.startTime, data.endTime);
  });
</script>